/* Sample code to create contract 
 * By Suttipong Kanakakorn
*/

if (typeof web3 == 'undefined') {
  // This is likely the case when running from nodejs
  var Web3 = require('web3');
  // set the provider you want from Web3.providers
  var web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
} 

// unlock from_account 6000 secs
accounts = web3.eth.accounts;
web3.personal.unlockAccount(accounts[0],"",6000)

// Replace lines below with codes paste from online compiler

var first_contract_sol_messagestorageContract = web3.eth.contract([{"constant":false,"inputs":[{"name":"s","type":"string"}],"name":"set","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"get","outputs":[{"name":"retVal","type":"string"}],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":false,"name":"s","type":"string"}],"name":"Set","type":"event"}]);
var first_contract_sol_messagestorage = first_contract_sol_messagestorageContract.new(
   {
     from: web3.eth.accounts[0], 
     data: '0x6060604052341561000c57fe5b5b6103a38061001c6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634ed3885e146100465780636d4ce63c146100a0575bfe5b341561004e57fe5b61009e600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610139565b005b34156100a857fe5b6100b0610215565b60405180806020018281038252838181518152602001915080519060200190808383600083146100ff575b8051825260208311156100ff576020820191506020810190506020830392506100db565b505050905090810190601f16801561012b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b806000908051906020019061014f9291906102be565b503373ffffffffffffffffffffffffffffffffffffffff167fde696604ac839ef8a5d0fcb2310ea48463357a6247e0d961d77c41d136a5d9468260405180806020018281038252838181518152602001915080519060200190808383600083146101d8575b8051825260208311156101d8576020820191506020810190506020830392506101b4565b505050905090810190601f1680156102045780820380516001836020036101000a031916815260200191505b509250505060405180910390a25b50565b61021d61033e565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102b35780601f10610288576101008083540402835291602001916102b3565b820191906000526020600020905b81548152906001019060200180831161029657829003601f168201915b505050505090505b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106102ff57805160ff191683800117855561032d565b8280016001018555821561032d579182015b8281111561032c578251825591602001919060010190610311565b5b50905061033a9190610352565b5090565b602060405190810160405280600081525090565b61037491905b80821115610370576000816000905550600101610358565b5090565b905600a165627a7a7230582099edda7bd6a4300a8810a35ac9b935c617b305cf1241dfd5d8b2c84ccc9aac3b0029', 
     gas: '200000'
   }, function (e, contract){
    console.log(e, contract);
    if (typeof contract.address !== 'undefined') {
         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
    }
 })

